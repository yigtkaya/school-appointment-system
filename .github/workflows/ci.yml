name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # ====================================
  # BACKEND TESTS
  # ====================================
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_school_appointments
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov black flake8 isort
    
    - name: Code formatting check (Black)
      working-directory: ./backend
      run: black --check --diff .
    
    - name: Import sorting check (isort)
      working-directory: ./backend
      run: isort --check-only --diff .
    
    - name: Linting (flake8)
      working-directory: ./backend
      run: flake8 app/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Type checking (mypy)
      working-directory: ./backend
      run: |
        pip install mypy
        mypy app/ --ignore-missing-imports
      continue-on-error: true
    
    - name: Run tests with coverage
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_school_appointments
        REDIS_URL: redis://localhost:6379/1
        SECRET_KEY: test-secret-key-for-ci
        RESEND_API_KEY: test-key
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # ====================================
  # SECURITY SCANNING
  # ====================================
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        pip install safety bandit semgrep
    
    - name: Check for known vulnerabilities (Safety)
      working-directory: ./backend
      run: safety check -r requirements.txt
    
    - name: Security linting (Bandit)
      working-directory: ./backend
      run: bandit -r app/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload security scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: backend/bandit-report.json
      continue-on-error: true

  # ====================================
  # DOCKER BUILD
  # ====================================
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      working-directory: ./backend
      run: |
        docker build -f deployment/Dockerfile -t school-appointment-api:test .
    
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-api -p 8000:8000 \
          -e DATABASE_URL=sqlite:///./test.db \
          -e SECRET_KEY=test-key \
          school-appointment-api:test
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Stop container
        docker stop test-api

  # ====================================
  # DEPLOYMENT (Production) - Docker Only
  # ====================================
  deploy-production:
    runs-on: ubuntu-latest
    needs: [backend-tests, security-scan, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Docker-based deployment to production would happen here"
        echo "This could include:"
        echo "- Building and pushing Docker images to Docker Hub/Registry"
        echo "- SSH to production server and pull latest images"
        echo "- Running docker-compose up with production config"
        echo "- Running database migrations via Docker"
        echo "- Health checks and rollback if needed"
        
    # Example Docker deployment steps (uncomment and configure as needed):
    # - name: Login to Docker Hub
    #   uses: docker/login-action@v3
    #   with:
    #     username: ${{ secrets.DOCKER_USERNAME }}
    #     password: ${{ secrets.DOCKER_PASSWORD }}
    #
    # - name: Build and push Docker images
    #   working-directory: ./backend
    #   run: |
    #     docker build -f deployment/Dockerfile -t yourusername/school-appointment-api:$GITHUB_SHA .
    #     docker build -f deployment/Dockerfile -t yourusername/school-appointment-api:latest .
    #     docker push yourusername/school-appointment-api:$GITHUB_SHA
    #     docker push yourusername/school-appointment-api:latest
    #
    # - name: Deploy to production server
    #   uses: appleboy/ssh-action@v1.0.0
    #   with:
    #     host: ${{ secrets.PRODUCTION_HOST }}
    #     username: ${{ secrets.PRODUCTION_USER }}
    #     key: ${{ secrets.PRODUCTION_SSH_KEY }}
    #     script: |
    #       cd /opt/school-appointment-system
    #       docker-compose -f backend/deployment/docker-compose.prod.yml pull
    #       docker-compose -f backend/deployment/docker-compose.prod.yml up -d
    #       docker system prune -f